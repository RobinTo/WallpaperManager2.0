var fs = require('fs');
var sizeOf = require('image-size');

function Settings(){
  var appLoc = process.env.APPDATA + '\\WallpaperManager\\';
  var settingsFile =  appLoc + 'settings.txt';
  var downloadedImageFile = appLoc + 'dlImages.txt';
  var wallpaperFolder = appLoc + 'wallpapers\\'

  // Available options:
  // savePath - custom wallpaper save location.
  // loadnsfw - download images with over_18 flag.
  // subredditlist - list over subreddits to download images from.
  var options = {};
  var acceptedDimensions = [];
  var acceptsAllDimensions = false;

  var downloadedImageUrls;
  var localImages;

  function init(){
    createDirIfNotExists(appLoc);
    createDirIfNotExists(wallpaperFolder);
    createFileIfNotExists(settingsFile);
    createFileIfNotExists(downloadedImageFile);

    loadSettingsFile();

    downloadedImageUrls = fs.readFileSync(downloadedImageFile, 'utf-8').split(/[\r\n]+/);
    localImages = fs.readdirSync(wallpaperFolder).filter(function(element){
      return (element.indexOf('.png') > -1 || element.indexOf('.jpg') > -1);
    });
  }

  function createDirIfNotExists(path){
    if(!fs.existsSync(path)){
      console.log('Directory: ' + path + ' did not exist. Created.');
      fs.mkdirSync(path);
    }
  }

  function createFileIfNotExists(path){
    if(!fs.existsSync(path)){
      console.log('File: ' + path + ' did not exist. Created.')
      fs.writeFileSync(path, '');
    }
  }

  // Loads settings file line by line pushing
  // accepted dimensions into accepted dimention array
  // and other options into options object.
  // Format for each line: key>value\r\n
  function loadSettingsFile(){
    var settingsContent = fs.readFileSync(settingsFile, 'utf-8').split(/[\r\n]+/);
    for(var i = 0; i < settingsContent.length; i++){
      if(settingsContent[i].length <= 0){
        continue;
      }
      var lineParts = settingsContent[i].split('>');

      if(lineParts[0] === 'dimension'){
        console.log('Loaded dimension ' + lineParts[0] + ' as ' + lineParts[1]);
        if (lineParts[1] === 'all'){
          acceptsAllDimensions = true;
          // Continue loading dimensions instead of break in case user
          // unchecks all dimensions flag again, and wants old settings back.
        }
        acceptedDimensions.push(lineParts[1]);
      }else{
        if(lineParts[0] === 'subredditlist'){
          options[lineParts[0]] = lineParts[1].split(',');
          console.log('Loaded setting ' + lineParts[0] + ' as ' + lineParts[1].split(','));
        }else{
          options[lineParts[0]] = lineParts[1];
        console.log('Loaded setting ' + lineParts[0] + ' as ' + lineParts[1]);
        }
      }
    }

    if(!('loadnsfw' in options)){
      options['loadnsfw'] = false;
    }
    if(!('savelocation' in options)){
      options['savelocation'] = wallpaperFolder;
    } else{
      wallpaperFolder = options['savelocation'];
      console.log('Wallpaper save folder is now ' + wallpaperFolder);
    }
    if(!('subredditlist' in options) || options[subredditlist].length <= 0){
      options['subredditlist'] = ['wallpaper', 'wallpapers'];
    }
    if(acceptedDimensions.length <= 0){
      acceptedDimensions.push('1920x1080');
    }
  }

  function saveSettings(newOptions, newDimensions){
    console.log('Saving settings');
    fs.unlink(settingsFile);
    fs.writeFileSync(settingsFile, '');

    for(var k in newOptions){
      fs.appendFile(settingsFile, k +'>'+ newOptions[k] + '\r\n', function(err){
        if(err) throw err;
      });
    }
    for(var i = 0; i < newDimensions.length; i++){
      fs.appendFile(settingsFile, 'dimension' +'>'+ newDimensions[i] + '\r\n', function(err){
        if(err) throw err;
      });
    }

    options = newOptions;
    if(!('loadnsfw' in options)){
      options['loadnsfw'] = false;
    }
    if('savelocation' in options){
      wallpaperLocation = options['savelocation'];
    }
    acceptedDimensions = newDimensions;
    if(acceptedDimensions.indexOf('all') > -1){
      acceptsAllDimensions = true;
    } else{
      acceptsAllDimensions = false;
    }
  }

  // After visiting an url, add that it is visited to settings
  // and add it to the list of visited urls in memory.
  function addVisitedUrl(url){
    fs.appendFile(downloadedImageFile, url + "\r\n", function(err){
      if(err) throw err;
    });
    downloadedImageUrls.push(url);
  }

  function checkForNameConflict(name){
    return fs.existsSync(getFullWallpaperPath(name+'.png'));
  }

  function isVisited(url){
    return(!(downloadedImageUrls.indexOf(url) < 0))
  }

  // Checks if the post matches criteria for downloading image.
  function isPostOk(data){
    return (data.url.indexOf('imgur') >= 0 && (!data.over_18 || (data.over_18 && options['loadnsfw'])) && (data.url.indexOf('png') >= 0 || data.url.indexOf('jpg') >= 0))
  }

  function getFullWallpaperPath(wallpaperName){
    if (wallpaperName.indexOf(wallpaperFolder) > -1){
      return wallpaperName;
    } else{
      return wallpaperFolder + wallpaperName;
    }
  }

  function deleteWallpaper(fileName){
    fs.unlink(getFullWallpaperPath(fileName));
  }

  function createDimensionString(dimensions){
    if(typeof dimensions === 'object'){
      return dimensions.width.toString() + 'x' + dimensions.height.toString();
    } else if(typeof dimensions === 'string' && /\d+x\d+/.test(dimensions)){
      return dimensions;
    } else{
      console.warn("Unable to create dimensionstring from: " + dimensions);
    }
  }

  function sizeOfWallpaper(wallpaper){
    return sizeOf(getFullWallpaperPath(wallpaper));
  }

  // Accepts wallpaper file name such as wallpaper.png
  // And check with accepted dimensions for match.
  function isDimensionMismatch(wallpaper){
    if(acceptedDimensions.indexOf('all') > -1){
      return false;
    }
    var dimensionString = createDimensionString(sizeOfWallpaper(wallpaper));
    if(acceptedDimensions.indexOf(dimensionString) > -1){
      return false; // Is accepted, not mismatch
    } else{
      return true; // Is mismatch
    }
  }

  function getSubredditList(){
    return options['subredditlist'];
  }
  function getOptions(){
    return options;
  }
  function getDimensions(){
    return acceptedDimensions;
  }

  init();
  this.saveSettings = saveSettings;
  this.getOptions = getOptions;
  this.getDimensions = getDimensions;
  this.getSubredditList = getSubredditList;
  this.getFullWallpaperPath = getFullWallpaperPath;
  this.visitedUrls = downloadedImageUrls;
  this.localImg = localImages;
  this.sizeOfWallpaper = sizeOfWallpaper;
  this.deleteWallpaper = deleteWallpaper;
  this.createFileIfNotExists = createFileIfNotExists;
  this.addVisitedUrl = addVisitedUrl;
  this.checkForNameConflict = checkForNameConflict;
  this.isVisited = isVisited;
  this.isPostOk = isPostOk;
  this.isDimensionMismatch = isDimensionMismatch;
}

module.exports = new Settings;
